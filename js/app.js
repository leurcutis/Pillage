


 //$('#container [hex-row=2][hex-column=3]').add('<img id="p1rw" src="http://i.imgur.com/kr285Wm.png" />');
// Character builder object constructor
// take a look at how to embed player 1 or player 2 meta data in
// each of the characters for winning condition check

// $('#resetGame').on('click', function() {

// });

// console.log('clicked');

// // player one and player two objects below
// // both have 'characters' arrays that are populated with characters when game starts
// // when attacks take place

var playerOne = {
  name : 'Player_One',
  characters : []
};

var playerTwo = {
  name : 'Player_Two',
  characters : []
};

// Character constructor below

var Character = function(moveRate, attackProximity, attackRate, hitPoints ) {
  this.characterMoveRate = moveRate;
  this.characterAttackProximity = attackProximity;
  this.characterAttackRate = attackRate;
  this.characterHitPoints = hitPoints;
};

// Characters generated by above Character constructor
// after each one is generated, they are pushed into the playerOne and playerTwo object arrays
// when a character is killed by 'hitPoints < 1' then they are removed from the array
// when an array is emptied during play, then game is over
// player with an array that still contains character objects wins the game

var pOneAssassin = new Character(3, 1, 1, 5);
playerOne.characters.push(pOneAssassin);

var pOneJuggernaut = new Character(1, 1, 2, 9);
playerOne.characters.push(pOneJuggernaut);

var pOneWizard = new Character(2, 3, 1, 7);
playerOne.characters.push(pOneWizard);



var move = function(character) {

    // character moves
    // check for attack opportunity within threshold
    // if yes, then call attack function here

};


// var attack = function {
//   // if opponent is in range
//   //   then attack
//   //
// }
// // // Player prototypes

// // Character.prototype.player


// // Move logic


// // Attack logic



// characters = (characters.indexOf('wizard')
//   return index
